{"remainingRequest":"C:\\Users\\Kyle\\creation\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Kyle\\creation\\src\\App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\Kyle\\creation\\src\\App.vue","mtime":1580060602560},{"path":"C:\\Users\\Kyle\\creation\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Kyle\\creation\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Kyle\\creation\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Kyle\\creation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Kyle\\creation\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgojYXBwIHsKICBmb250LWZhbWlseTogJ0F2ZW5pcicsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7CiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7CiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTsKICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgY29sb3I6ICMyYzNlNTA7CiAgb3ZlcmZsb3cteDpoaWRkZW47Cn0KCiNuYXYgewogIHBhZGRpbmc6IDMwcHg7Cn0KCiNuYXYgYSB7CiAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgY29sb3I6ICMyYzNlNTA7Cn0KCiNuYXYgYS5yb3V0ZXItbGluay1leGFjdC1hY3RpdmUgewogIGNvbG9yOiAjNDJiOTgzOwp9Cg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    \n    <router-view/>\n  </div>\n</template>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  overflow-x:hidden;\n}\n\n#nav {\n  padding: 30px;\n}\n\n#nav a {\n  font-weight: bold;\n  color: #2c3e50;\n}\n\n#nav a.router-link-exact-active {\n  color: #42b983;\n}\n</style>\n\n<script>\nconst {remote} = require('electron')\n         const {Tray, Menu} = remote\n         const path = require('path')\n\n         let trayIcon = new Tray(path.join('C:\\\\Users\\\\Kyle\\\\Documents\\\\My Games\\\\Path of Exile\\\\DailyDealCache','DailyDealCrimsonWeapon.png'))\n\n         const trayMenuTemplate = [\n            {\n               label: 'Empty Application',\n               enabled: false\n            },\n            \n            {\n               label: 'Settings',\n               click: function () {\n                  console.log(\"Clicked on settings\")\n               }\n            },\n            \n            {\n               label: 'Help',\n               click: function () {\n                  console.log(\"Clicked on Help\")\n               }\n            }\n         ]\n         \n         let trayMenu = Menu.buildFromTemplate(trayMenuTemplate)\n         trayIcon.setContextMenu(trayMenu)\n\n\n\n\n\nconst fs = require('fs');\nconst fetch = require('node-fetch')\n\n\n\n\n \n\n\n\nasync function embedFontAndMeasureText() {\n\tconst{ PDFDocument, rgb } =require('pdf-lib');\n\tconst fontkit=require( '@pdf-lib/fontkit');\n\tconst url = 'https://raw.githubusercontent.com/mapzen/open/master/assets/fonts/Gotham-Light.ttf'\n\tconst fontBytes = await fetch(url).then(res => res.arrayBuffer())\n\n\tconst existingPdfBytes = fs.readFileSync(\"C:\\\\Users\\\\Kyle\\\\SpaceSniffer User Manual.pdf\");\n\n\t// Load a PDFDocument from the existing PDF bytes\n\n\tconst pdfDoc = await PDFDocument.load(existingPdfBytes)\n\n\n\tpdfDoc.registerFontkit(fontkit)\n\tconst customFont = await pdfDoc.embedFont(fontBytes)\n\n\tconst page = pdfDoc.addPage()\n\n\tconst text = 'This is text in an embedded font!'\n\tconst textSize = 35\n\n\n\n\tpage.drawText(text, {\n\t\tx: 40,\n\t\ty: 450,\n\t\tsize: textSize,\n\t\tfont: customFont,\n\t\tcolor: rgb(0, 0.53, 0.71),\n\t})\n\n\n\tconst pdfBytes = await pdfDoc.save()\n\tfs.writeFile('test.pdf', pdfBytes, ()=>{});\n}\n\n\nembedFontAndMeasureText();\n\n// For example, `pdfBytes` can be:\n//   • Written to a file in Node\n//   • Downloaded from the browser\n//   • Rendered in an <iframe>\n\n\n\n\n\n\n\n</script>\n"]}]}