{"remainingRequest":"C:\\Users\\Kyle\\creation\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Kyle\\creation\\src\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Kyle\\creation\\src\\App.vue","mtime":1579998788225},{"path":"C:\\Users\\Kyle\\creation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Kyle\\creation\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Kyle\\creation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Kyle\\creation\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmV4cG9ydCBkZWZhdWx0IHsKICBjb25zdCBodHRwID0gcmVxdWlyZSgnaHR0cCcpOwpjb25zdCB7IGV4ZWMsIHNwYXduIH0gPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJyk7Cgpjb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7CmNvbnN0IGZldGNoID0gcmVxdWlyZSgnbm9kZS1mZXRjaCcpCgoKCmNvbnN0eyBkZWdyZWVzLCBQREZEb2N1bWVudCwgcmdiLCBTdGFuZGFyZEZvbnRzIH0gPSByZXF1aXJlKCAncGRmLWxpYicpOwogCgoKCmFzeW5jIGZ1bmN0aW9uIGVtYmVkRm9udEFuZE1lYXN1cmVUZXh0KCkgewoJY29uc3R7IFBERkRvY3VtZW50LCByZ2IgfSA9cmVxdWlyZSgncGRmLWxpYicpOwoJY29uc3QgZm9udGtpdD1yZXF1aXJlKCAnQHBkZi1saWIvZm9udGtpdCcpOwoJY29uc3QgdXJsID0gJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9tYXB6ZW4vb3Blbi9tYXN0ZXIvYXNzZXRzL2ZvbnRzL0dvdGhhbS1MaWdodC50dGYnCgljb25zdCBmb250Qnl0ZXMgPSBhd2FpdCBmZXRjaCh1cmwpLnRoZW4ocmVzID0+IHJlcy5hcnJheUJ1ZmZlcigpKQoKCWNvbnN0IGV4aXN0aW5nUGRmQnl0ZXMgPSBmcy5yZWFkRmlsZVN5bmMoIkM6XFxVc2Vyc1xcS3lsZVxcU3BhY2VTbmlmZmVyIFVzZXIgTWFudWFsLnBkZiIpOwoKCS8vIExvYWQgYSBQREZEb2N1bWVudCBmcm9tIHRoZSBleGlzdGluZyBQREYgYnl0ZXMKCgljb25zdCBwZGZEb2MgPSBhd2FpdCBQREZEb2N1bWVudC5sb2FkKGV4aXN0aW5nUGRmQnl0ZXMpCgoKCXBkZkRvYy5yZWdpc3RlckZvbnRraXQoZm9udGtpdCkKCWNvbnN0IGN1c3RvbUZvbnQgPSBhd2FpdCBwZGZEb2MuZW1iZWRGb250KGZvbnRCeXRlcykKCgljb25zdCBwYWdlID0gcGRmRG9jLmFkZFBhZ2UoKQoKCWNvbnN0IHRleHQgPSAnVGhpcyBpcyB0ZXh0IGluIGFuIGVtYmVkZGVkIGZvbnQhJwoJY29uc3QgdGV4dFNpemUgPSAzNQoJY29uc3QgdGV4dFdpZHRoID0gY3VzdG9tRm9udC53aWR0aE9mVGV4dEF0U2l6ZSh0ZXh0LCB0ZXh0U2l6ZSkKCWNvbnN0IHRleHRIZWlnaHQgPSBjdXN0b21Gb250LmhlaWdodEF0U2l6ZSh0ZXh0U2l6ZSkKCglwYWdlLmRyYXdUZXh0KHRleHQsIHsKCQl4OiA0MCwKCQl5OiA0NTAsCgkJc2l6ZTogdGV4dFNpemUsCgkJZm9udDogY3VzdG9tRm9udCwKCQljb2xvcjogcmdiKDAsIDAuNTMsIDAuNzEpLAoJfSkKCgoJY29uc3QgcGRmQnl0ZXMgPSBhd2FpdCBwZGZEb2Muc2F2ZSgpCglmcy53cml0ZUZpbGUoJ3Rlc3QucGRmJywgcGRmQnl0ZXMsICgpPT57fSk7Cn0KCgplbWJlZEZvbnRBbmRNZWFzdXJlVGV4dCgpOwoKLy8gRm9yIGV4YW1wbGUsIGBwZGZCeXRlc2AgY2FuIGJlOgovLyAgIOKAoiBXcml0dGVuIHRvIGEgZmlsZSBpbiBOb2RlCi8vICAg4oCiIERvd25sb2FkZWQgZnJvbSB0aGUgYnJvd3NlcgovLyAgIOKAoiBSZW5kZXJlZCBpbiBhbiA8aWZyYW1lPgoKCgoKCnZhciBzZWNyZXQgPSAiWm1NNE5UUmpObVptTlRVMU5EZzBaamczTW1FM05qQTVOREU0WlRFeVlUVTZOelZrTVRJMVpXSmpOalJtTkRRelpHRTBObU0yTkRCbE5XWXpNR1U0WWpVPSIKCmNvbnN0IG9wdGlvbnMgPSB7Cglob3N0bmFtZTogJ3NzYXBpLnNoaXBzdGF0aW9uLmNvbScsCgloZWFkZXJzOnsKCQknQXV0aG9yaXphdGlvbic6ICdCYXNpYyAnKyBzZWNyZXQsCgkJJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJwoJfQoKfTsKCnZhciBhY3RpdmUgPSB0cnVlOwoKY29uc3QgTEFCRUxTX1BSSU5URURfVEFHX0lEID0gODk2NTU7CmNvbnN0IEVSUk9SX1BSSU5USU5HX1RBR19JRCA9IDkxMDM4OwoKCnZhciBhZGRUYWcgPSBmdW5jdGlvbihvcmRlcklkLCBsYWJlbElkKXsKCW9wdGlvbnMucGF0aCA9ICcvb3JkZXJzL2FkZHRhZyc7CglvcHRpb25zLm1ldGhvZCA9ICdQT1NUJzsKCWNvbnN0IHBvc3REYXRhID0gewoJICAnb3JkZXJJZCc6b3JkZXJJZCwKCSAgJ3RhZ0lkJzogbGFiZWxJZAoJfTsKCgljb25zdCByZXEgPSBodHRwLnJlcXVlc3Qob3B0aW9ucywgKHJlcykgPT4gewoJCWNvbnNvbGUubG9nKGBTVEFUVVM6ICR7cmVzLnN0YXR1c0NvZGV9YCk7CgkJY29uc29sZS5sb2coYEhFQURFUlM6ICR7SlNPTi5zdHJpbmdpZnkocmVzLmhlYWRlcnMpfWApOwoJCXJlcy5zZXRFbmNvZGluZygndXRmOCcpOwoJCXJlcy5vbignZGF0YScsIChjaHVuaykgPT4gewoJCQljb25zb2xlLmxvZyhgQk9EWTogJHtjaHVua31gKTsKCQl9KTsKCQlyZXMub24oJ2VuZCcsICgpID0+IHsKCQkJY29uc29sZS5sb2coJ05vIG1vcmUgZGF0YSBpbiByZXNwb25zZS4nKTsKCQl9KTsKCX0pOwoKCXJlcS5vbignZXJyb3InLCAoZSkgPT4gewoJCWNvbnNvbGUuZXJyb3IoYHByb2JsZW0gd2l0aCByZXF1ZXN0OiAke2UubWVzc2FnZX1gKTsKCQlhZGRUYWcob3JkZXIub3JkZXJJZCwgRVJST1JfUFJJTlRJTkdfVEFHX0lEKTsKCX0pOwoKCglyZXEud3JpdGUoSlNPTi5zdHJpbmdpZnkocG9zdERhdGEpKTsKCXJlcS5lbmQoKTsKfQoKCnZhciBwYXJzZU9yZGVycyA9IGZ1bmN0aW9uKG9yZGVyKXsKCglpZihvcmRlci50YWdJZHMgPT09IG51bGwgfHwgIAoJCShvcmRlci50YWdJZHMuaW5kZXhPZihMQUJFTFNfUFJJTlRFRF9UQUdfSUQpID09PSAtMSAKCQkmJiBvcmRlci50YWdJZHMuaW5kZXhPZihFUlJPUl9QUklOVElOR19UQUdfSUQpID09PSAtMSkpewoKCQlmb3IoaXRlbSBpbiBvcmRlci5pdGVtcyl7CgkJCXZhciBpdGVtSW5PcmRlciA9IG9yZGVyLml0ZW1zW2l0ZW1dCgoJCQlpZihpdGVtSW5PcmRlci5uYW1lLmluZGV4T2YoJ0dyaW5kOicpID09PSAtMSkKCQkJCWNvbnRpbnVlOwoKCQkJLy9FdGhpb3BpYSBZaXJnYWNoZWZmZSBTaXplOiAxMm96LCBHcmluZDogV2hvbGUKCQkJdmFyIG5hbWUgPSBpdGVtSW5PcmRlci5uYW1lLnNwbGl0KCdTaXplJylbMF0udHJpbSgpOwoJCQl2YXIgc2l6ZSA9IGl0ZW1Jbk9yZGVyLm5hbWUuaW5kZXhPZignMTJveicpICE9IC0xID8gJyAxMm96ICcgOiAnJzsKCQkJc2l6ZSA9IGl0ZW1Jbk9yZGVyLm5hbWUuaW5kZXhPZignNWxiJykgIT0gLTEgPyAnIDVsYiAnIDogc2l6ZTsKCQkJdmFyIGdyaW5kID0gaXRlbUluT3JkZXIubmFtZS5zcGxpdCgnR3JpbmQ6JylbMV0udHJpbSgpOwoKCQkJdmFyIGxhYmVsRmlsZU5hbWUgPSBuYW1lICsgc2l6ZSArIGdyaW5kOwoKCQkJCgoJCQkvKlRoaXMgd2lsbCBoZWxwOgoKCQkJCXN0YXJ0IGFjcm9yZDMyIC9TIC9PIC9IIC9UIDxjb21wbGV0ZSBmaWxlbmFtZSB3aXRoIHBhdGg+IDxwcmludGVybmFtZSBvciBzaGFyZT4KCQkJCXRpbWVvdXQgL3QgOSAvbm9icmVhaz5udWwKCQkJCXRhc2traWxsIC9GIC9JTSBBY3JvUmQzMi5leGUgL0ZJICJVU0VSTkFNRSBlcSA8eW91ciB1c2VybmFtZT4iPm51bCovCgoKCgkJCWNvbnN0IFBBVEhfVE9fTEFCRUxTID0gIkM6XFwiCgkJCXZhciBwcmludGVyTmFtZSA9IHNpemUgPT09ICcgMTJveiAnID8gJ1JFVEFJTCBQUklOVEVSJzogJ0JVTEsgUFJJTlRFUic7CgkJCXZhciBkcml2ZXJOYW1lID0gc2l6ZSA9PT0gJyAxMm96ICcgPyAnUkVUQUlMIERSSVZFcic6ICdCVUxLIERSSVZFUic7CgkJCXZhciBwb3J0ID0gc2l6ZSA9PT0gJyAxMm96ICcgPyAnUkVUQUlMIFBPUlQnOiAnQlVMSyBQT1JUJzsKCgkJCWZvcih2YXIgaSA9IDA7IGkgPCBpdGVtSW5PcmRlci5xdWFudGl0eTsgaSsrKXsKCQkJCXZhciBwcmludCA9IHNwYXduKGBBY3JvUmQzMi5leGVgLAoJCQkJCVsnL2gnLCcvdCcsIGxhYmVsRmlsZU5hbWUsIHByaW50ZXJOYW1lLCBkcml2ZXJOYW1lLCBwb3J0IF0KCQkJCSwgeydjd2QnOiBgQzpcXFByb2dyYW0gRmlsZXMgKHg4NilcXEFkb2JlXFxBY3JvYmF0IFJlYWRlciBEQ1xcUmVhZGVyYH0pOwoKCQkJCXByaW50LnN0ZG91dC5vbignZGF0YScsIChkYXRhKSA9PiB7CgkJCQkgIGNvbnNvbGUubG9nKGBzdGRvdXQ6ICR7ZGF0YX1gKTsKCQkJCX0pOwoKCQkJCXByaW50LnN0ZGVyci5vbignZGF0YScsIChkYXRhKSA9PiB7CgkJCQkgIGNvbnNvbGUuZXJyb3IoYHN0ZGVycjogJHtkYXRhfWApOwoJCQkJICBhZGRUYWcob3JkZXIub3JkZXJJZCwgRVJST1JfUFJJTlRJTkdfVEFHX0lEKTsKCQkJCX0pOwoKCQkJCXByaW50Lm9uKCdjbG9zZScsIChjb2RlKSA9PiB7CgkJCQkgIGNvbnNvbGUubG9nKGBjaGlsZCBwcm9jZXNzIGV4aXRlZCB3aXRoIGNvZGUgJHtjb2RlfWApOwoJCQkJfSk7CgkJCX0KCgoJCX0KCgkJLy9hZGRUYWcob3JkZXIub3JkZXJJZCwgTEFCRUxTX1BSSU5URURfVEFHX0lEKTsKCX0KCn0KCgoKCnZhciBnZXRPcmRlcnMgPSBmdW5jdGlvbigpewoJCglpZihhY3RpdmUpewoJCgkJb3B0aW9ucy5wYXRoID0gJy9vcmRlcnM/b3JkZXJTdGF0dXM9YXdhaXRpbmdfc2hpcG1lbnQnOwoJCW9wdGlvbnMubWV0aG9kID0gJ0dFVCc7CgkJY29uc3QgcmVxID0gaHR0cC5nZXQob3B0aW9ucywgKHJlcykgPT4gewoJCQljb25zb2xlLmxvZyhgU1RBVFVTOiAke3Jlcy5zdHRhdXNDb2RlfWApOwoJCQljb25zb2xlLmxvZyhgSEVBREVSUzogJHtKU09OLnN0cmluZ2lmeShyZXMuaGVhZGVycyl9YCk7CgkJCXJlcy5zZXRFbmNvZGluZygndXRmOCcpOwoKCQkJbGV0IHJhd0RhdGEgPSAnJzsKCQkJcmVzLm9uKCdkYXRhJywgKGNodW5rKSA9PiB7IHJhd0RhdGEgKz0gY2h1bms7IH0pOwoJCQlyZXMub24oJ2VuZCcsICgpID0+IHsKCQkJCXRyeSB7CgkJCQkJY29uc3QgcGFyc2VkRGF0YSA9IEpTT04ucGFyc2UocmF3RGF0YSk7CgoJCQkJCWZvciAob3JkZXIgaW4gcGFyc2VkRGF0YS5vcmRlcnMpewoJCQkJCQlwYXJzZU9yZGVycyhwYXJzZWREYXRhLm9yZGVyc1tvcmRlcl0pCgkJCQkJfQoJCQkJCQoKCQkJCX0gY2F0Y2ggKGUpIHsKCQkJCQljb25zb2xlLmVycm9yKGUubWVzc2FnZSk7CgkJCQl9CgkJCX0pOwoKCQkJcmVxLm9uKCdlcnJvcicsIChlKSA9PiB7CgkJCSAgY29uc29sZS5lcnJvcihgcHJvYmxlbSB3aXRoIHJlcXVlc3Q6ICR7ZS5tZXNzYWdlfWApOwoJCQl9KTsKCQl9KTsKCX0KfTsKCmdldE9yZGVycygpOwpzZXRJbnRlcnZhbChnZXRPcmRlcnMsIDMwMDAwKTsKCgp9Cg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;AACA;AACA;;AAEA;AACA;;;;AAIA;;;;;AAKA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;;;;;AAMA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;;;;;AAKA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <div id=\"nav\">\n      <router-link to=\"/\">Home</router-link> |\n      <router-link to=\"/about\">About</router-link>\n    </div>\n    <router-view/>\n  </div>\n</template>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\n\n#nav {\n  padding: 30px;\n}\n\n#nav a {\n  font-weight: bold;\n  color: #2c3e50;\n}\n\n#nav a.router-link-exact-active {\n  color: #42b983;\n}\n</style>\n\n<script>\nexport default {\n  const http = require('http');\nconst { exec, spawn } = require('child_process');\n\nconst fs = require('fs');\nconst fetch = require('node-fetch')\n\n\n\nconst{ degrees, PDFDocument, rgb, StandardFonts } = require( 'pdf-lib');\n \n\n\n\nasync function embedFontAndMeasureText() {\n\tconst{ PDFDocument, rgb } =require('pdf-lib');\n\tconst fontkit=require( '@pdf-lib/fontkit');\n\tconst url = 'https://raw.githubusercontent.com/mapzen/open/master/assets/fonts/Gotham-Light.ttf'\n\tconst fontBytes = await fetch(url).then(res => res.arrayBuffer())\n\n\tconst existingPdfBytes = fs.readFileSync(\"C:\\\\Users\\\\Kyle\\\\SpaceSniffer User Manual.pdf\");\n\n\t// Load a PDFDocument from the existing PDF bytes\n\n\tconst pdfDoc = await PDFDocument.load(existingPdfBytes)\n\n\n\tpdfDoc.registerFontkit(fontkit)\n\tconst customFont = await pdfDoc.embedFont(fontBytes)\n\n\tconst page = pdfDoc.addPage()\n\n\tconst text = 'This is text in an embedded font!'\n\tconst textSize = 35\n\tconst textWidth = customFont.widthOfTextAtSize(text, textSize)\n\tconst textHeight = customFont.heightAtSize(textSize)\n\n\tpage.drawText(text, {\n\t\tx: 40,\n\t\ty: 450,\n\t\tsize: textSize,\n\t\tfont: customFont,\n\t\tcolor: rgb(0, 0.53, 0.71),\n\t})\n\n\n\tconst pdfBytes = await pdfDoc.save()\n\tfs.writeFile('test.pdf', pdfBytes, ()=>{});\n}\n\n\nembedFontAndMeasureText();\n\n// For example, `pdfBytes` can be:\n//   • Written to a file in Node\n//   • Downloaded from the browser\n//   • Rendered in an <iframe>\n\n\n\n\n\nvar secret = \"ZmM4NTRjNmZmNTU1NDg0Zjg3MmE3NjA5NDE4ZTEyYTU6NzVkMTI1ZWJjNjRmNDQzZGE0NmM2NDBlNWYzMGU4YjU=\"\n\nconst options = {\n\thostname: 'ssapi.shipstation.com',\n\theaders:{\n\t\t'Authorization': 'Basic '+ secret,\n\t\t'Content-Type': 'application/json'\n\t}\n\n};\n\nvar active = true;\n\nconst LABELS_PRINTED_TAG_ID = 89655;\nconst ERROR_PRINTING_TAG_ID = 91038;\n\n\nvar addTag = function(orderId, labelId){\n\toptions.path = '/orders/addtag';\n\toptions.method = 'POST';\n\tconst postData = {\n\t  'orderId':orderId,\n\t  'tagId': labelId\n\t};\n\n\tconst req = http.request(options, (res) => {\n\t\tconsole.log(`STATUS: ${res.statusCode}`);\n\t\tconsole.log(`HEADERS: ${JSON.stringify(res.headers)}`);\n\t\tres.setEncoding('utf8');\n\t\tres.on('data', (chunk) => {\n\t\t\tconsole.log(`BODY: ${chunk}`);\n\t\t});\n\t\tres.on('end', () => {\n\t\t\tconsole.log('No more data in response.');\n\t\t});\n\t});\n\n\treq.on('error', (e) => {\n\t\tconsole.error(`problem with request: ${e.message}`);\n\t\taddTag(order.orderId, ERROR_PRINTING_TAG_ID);\n\t});\n\n\n\treq.write(JSON.stringify(postData));\n\treq.end();\n}\n\n\nvar parseOrders = function(order){\n\n\tif(order.tagIds === null ||  \n\t\t(order.tagIds.indexOf(LABELS_PRINTED_TAG_ID) === -1 \n\t\t&& order.tagIds.indexOf(ERROR_PRINTING_TAG_ID) === -1)){\n\n\t\tfor(item in order.items){\n\t\t\tvar itemInOrder = order.items[item]\n\n\t\t\tif(itemInOrder.name.indexOf('Grind:') === -1)\n\t\t\t\tcontinue;\n\n\t\t\t//Ethiopia Yirgacheffe Size: 12oz, Grind: Whole\n\t\t\tvar name = itemInOrder.name.split('Size')[0].trim();\n\t\t\tvar size = itemInOrder.name.indexOf('12oz') != -1 ? ' 12oz ' : '';\n\t\t\tsize = itemInOrder.name.indexOf('5lb') != -1 ? ' 5lb ' : size;\n\t\t\tvar grind = itemInOrder.name.split('Grind:')[1].trim();\n\n\t\t\tvar labelFileName = name + size + grind;\n\n\t\t\t\n\n\t\t\t/*This will help:\n\n\t\t\t\tstart acrord32 /S /O /H /T <complete filename with path> <printername or share>\n\t\t\t\ttimeout /t 9 /nobreak>nul\n\t\t\t\ttaskkill /F /IM AcroRd32.exe /FI \"USERNAME eq <your username>\">nul*/\n\n\n\n\t\t\tconst PATH_TO_LABELS = \"C:\\\\\"\n\t\t\tvar printerName = size === ' 12oz ' ? 'RETAIL PRINTER': 'BULK PRINTER';\n\t\t\tvar driverName = size === ' 12oz ' ? 'RETAIL DRIVEr': 'BULK DRIVER';\n\t\t\tvar port = size === ' 12oz ' ? 'RETAIL PORT': 'BULK PORT';\n\n\t\t\tfor(var i = 0; i < itemInOrder.quantity; i++){\n\t\t\t\tvar print = spawn(`AcroRd32.exe`,\n\t\t\t\t\t['/h','/t', labelFileName, printerName, driverName, port ]\n\t\t\t\t, {'cwd': `C:\\\\Program Files (x86)\\\\Adobe\\\\Acrobat Reader DC\\\\Reader`});\n\n\t\t\t\tprint.stdout.on('data', (data) => {\n\t\t\t\t  console.log(`stdout: ${data}`);\n\t\t\t\t});\n\n\t\t\t\tprint.stderr.on('data', (data) => {\n\t\t\t\t  console.error(`stderr: ${data}`);\n\t\t\t\t  addTag(order.orderId, ERROR_PRINTING_TAG_ID);\n\t\t\t\t});\n\n\t\t\t\tprint.on('close', (code) => {\n\t\t\t\t  console.log(`child process exited with code ${code}`);\n\t\t\t\t});\n\t\t\t}\n\n\n\t\t}\n\n\t\t//addTag(order.orderId, LABELS_PRINTED_TAG_ID);\n\t}\n\n}\n\n\n\n\nvar getOrders = function(){\n\t\n\tif(active){\n\t\n\t\toptions.path = '/orders?orderStatus=awaiting_shipment';\n\t\toptions.method = 'GET';\n\t\tconst req = http.get(options, (res) => {\n\t\t\tconsole.log(`STATUS: ${res.sttausCode}`);\n\t\t\tconsole.log(`HEADERS: ${JSON.stringify(res.headers)}`);\n\t\t\tres.setEncoding('utf8');\n\n\t\t\tlet rawData = '';\n\t\t\tres.on('data', (chunk) => { rawData += chunk; });\n\t\t\tres.on('end', () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst parsedData = JSON.parse(rawData);\n\n\t\t\t\t\tfor (order in parsedData.orders){\n\t\t\t\t\t\tparseOrders(parsedData.orders[order])\n\t\t\t\t\t}\n\t\t\t\t\t\n\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(e.message);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treq.on('error', (e) => {\n\t\t\t  console.error(`problem with request: ${e.message}`);\n\t\t\t});\n\t\t});\n\t}\n};\n\ngetOrders();\nsetInterval(getOrders, 30000);\n\n\n}\n</script>\n"]}]}