{"remainingRequest":"C:\\Users\\Kyle\\creation\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Kyle\\creation\\src\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Kyle\\creation\\src\\App.vue","mtime":1580060602560},{"path":"C:\\Users\\Kyle\\creation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Kyle\\creation\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Kyle\\creation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Kyle\\creation\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmNvbnN0IHtyZW1vdGV9ID0gcmVxdWlyZSgnZWxlY3Ryb24nKQogICAgICAgICBjb25zdCB7VHJheSwgTWVudX0gPSByZW1vdGUKICAgICAgICAgY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKQoKICAgICAgICAgbGV0IHRyYXlJY29uID0gbmV3IFRyYXkocGF0aC5qb2luKCdDOlxcVXNlcnNcXEt5bGVcXERvY3VtZW50c1xcTXkgR2FtZXNcXFBhdGggb2YgRXhpbGVcXERhaWx5RGVhbENhY2hlJywnRGFpbHlEZWFsQ3JpbXNvbldlYXBvbi5wbmcnKSkKCiAgICAgICAgIGNvbnN0IHRyYXlNZW51VGVtcGxhdGUgPSBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgbGFiZWw6ICdFbXB0eSBBcHBsaWNhdGlvbicsCiAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIGxhYmVsOiAnU2V0dGluZ3MnLAogICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiQ2xpY2tlZCBvbiBzZXR0aW5ncyIpCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgbGFiZWw6ICdIZWxwJywKICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIkNsaWNrZWQgb24gSGVscCIpCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICBdCiAgICAgICAgIAogICAgICAgICBsZXQgdHJheU1lbnUgPSBNZW51LmJ1aWxkRnJvbVRlbXBsYXRlKHRyYXlNZW51VGVtcGxhdGUpCiAgICAgICAgIHRyYXlJY29uLnNldENvbnRleHRNZW51KHRyYXlNZW51KQoKCgoKCmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTsKY29uc3QgZmV0Y2ggPSByZXF1aXJlKCdub2RlLWZldGNoJykKCgoKCiAKCgoKYXN5bmMgZnVuY3Rpb24gZW1iZWRGb250QW5kTWVhc3VyZVRleHQoKSB7Cgljb25zdHsgUERGRG9jdW1lbnQsIHJnYiB9ID1yZXF1aXJlKCdwZGYtbGliJyk7Cgljb25zdCBmb250a2l0PXJlcXVpcmUoICdAcGRmLWxpYi9mb250a2l0Jyk7Cgljb25zdCB1cmwgPSAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL21hcHplbi9vcGVuL21hc3Rlci9hc3NldHMvZm9udHMvR290aGFtLUxpZ2h0LnR0ZicKCWNvbnN0IGZvbnRCeXRlcyA9IGF3YWl0IGZldGNoKHVybCkudGhlbihyZXMgPT4gcmVzLmFycmF5QnVmZmVyKCkpCgoJY29uc3QgZXhpc3RpbmdQZGZCeXRlcyA9IGZzLnJlYWRGaWxlU3luYygiQzpcXFVzZXJzXFxLeWxlXFxTcGFjZVNuaWZmZXIgVXNlciBNYW51YWwucGRmIik7CgoJLy8gTG9hZCBhIFBERkRvY3VtZW50IGZyb20gdGhlIGV4aXN0aW5nIFBERiBieXRlcwoKCWNvbnN0IHBkZkRvYyA9IGF3YWl0IFBERkRvY3VtZW50LmxvYWQoZXhpc3RpbmdQZGZCeXRlcykKCgoJcGRmRG9jLnJlZ2lzdGVyRm9udGtpdChmb250a2l0KQoJY29uc3QgY3VzdG9tRm9udCA9IGF3YWl0IHBkZkRvYy5lbWJlZEZvbnQoZm9udEJ5dGVzKQoKCWNvbnN0IHBhZ2UgPSBwZGZEb2MuYWRkUGFnZSgpCgoJY29uc3QgdGV4dCA9ICdUaGlzIGlzIHRleHQgaW4gYW4gZW1iZWRkZWQgZm9udCEnCgljb25zdCB0ZXh0U2l6ZSA9IDM1CgoKCglwYWdlLmRyYXdUZXh0KHRleHQsIHsKCQl4OiA0MCwKCQl5OiA0NTAsCgkJc2l6ZTogdGV4dFNpemUsCgkJZm9udDogY3VzdG9tRm9udCwKCQljb2xvcjogcmdiKDAsIDAuNTMsIDAuNzEpLAoJfSkKCgoJY29uc3QgcGRmQnl0ZXMgPSBhd2FpdCBwZGZEb2Muc2F2ZSgpCglmcy53cml0ZUZpbGUoJ3Rlc3QucGRmJywgcGRmQnl0ZXMsICgpPT57fSk7Cn0KCgplbWJlZEZvbnRBbmRNZWFzdXJlVGV4dCgpOwoKLy8gRm9yIGV4YW1wbGUsIGBwZGZCeXRlc2AgY2FuIGJlOgovLyAgIOKAoiBXcml0dGVuIHRvIGEgZmlsZSBpbiBOb2RlCi8vICAg4oCiIERvd25sb2FkZWQgZnJvbSB0aGUgYnJvd3NlcgovLyAgIOKAoiBSZW5kZXJlZCBpbiBhbiA8aWZyYW1lPgoKCgoKCgoK"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;AAMA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    \n    <router-view/>\n  </div>\n</template>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  overflow-x:hidden;\n}\n\n#nav {\n  padding: 30px;\n}\n\n#nav a {\n  font-weight: bold;\n  color: #2c3e50;\n}\n\n#nav a.router-link-exact-active {\n  color: #42b983;\n}\n</style>\n\n<script>\nconst {remote} = require('electron')\n         const {Tray, Menu} = remote\n         const path = require('path')\n\n         let trayIcon = new Tray(path.join('C:\\\\Users\\\\Kyle\\\\Documents\\\\My Games\\\\Path of Exile\\\\DailyDealCache','DailyDealCrimsonWeapon.png'))\n\n         const trayMenuTemplate = [\n            {\n               label: 'Empty Application',\n               enabled: false\n            },\n            \n            {\n               label: 'Settings',\n               click: function () {\n                  console.log(\"Clicked on settings\")\n               }\n            },\n            \n            {\n               label: 'Help',\n               click: function () {\n                  console.log(\"Clicked on Help\")\n               }\n            }\n         ]\n         \n         let trayMenu = Menu.buildFromTemplate(trayMenuTemplate)\n         trayIcon.setContextMenu(trayMenu)\n\n\n\n\n\nconst fs = require('fs');\nconst fetch = require('node-fetch')\n\n\n\n\n \n\n\n\nasync function embedFontAndMeasureText() {\n\tconst{ PDFDocument, rgb } =require('pdf-lib');\n\tconst fontkit=require( '@pdf-lib/fontkit');\n\tconst url = 'https://raw.githubusercontent.com/mapzen/open/master/assets/fonts/Gotham-Light.ttf'\n\tconst fontBytes = await fetch(url).then(res => res.arrayBuffer())\n\n\tconst existingPdfBytes = fs.readFileSync(\"C:\\\\Users\\\\Kyle\\\\SpaceSniffer User Manual.pdf\");\n\n\t// Load a PDFDocument from the existing PDF bytes\n\n\tconst pdfDoc = await PDFDocument.load(existingPdfBytes)\n\n\n\tpdfDoc.registerFontkit(fontkit)\n\tconst customFont = await pdfDoc.embedFont(fontBytes)\n\n\tconst page = pdfDoc.addPage()\n\n\tconst text = 'This is text in an embedded font!'\n\tconst textSize = 35\n\n\n\n\tpage.drawText(text, {\n\t\tx: 40,\n\t\ty: 450,\n\t\tsize: textSize,\n\t\tfont: customFont,\n\t\tcolor: rgb(0, 0.53, 0.71),\n\t})\n\n\n\tconst pdfBytes = await pdfDoc.save()\n\tfs.writeFile('test.pdf', pdfBytes, ()=>{});\n}\n\n\nembedFontAndMeasureText();\n\n// For example, `pdfBytes` can be:\n//   • Written to a file in Node\n//   • Downloaded from the browser\n//   • Rendered in an <iframe>\n\n\n\n\n\n\n\n</script>\n"]}]}